        ******* learn docker *********



        #### basics  of docker   ####

1)  Install Docker on your system
2)  Create a Dockerfile in your project directory
3)  Build the Docker image using the command `docker build -t <image_name> .
4)  Run the Docker container using the command `docker run -p <host_port>:<container_port> <image_name>`
5)  Verify the container is running using the command `docker ps`
6)  Stop the container using the command `docker stop <container_id>`

        #### advanced  docker concepts  ####

Docker Compose:
Docker Swarm:
Docker Networking:
Docker Volumes:
Docker Secrets:
Docker Configs:
Docker Service Discovery:
Docker Load Balancing:
Docker Rolling Updates: 
Docker Health Checks:
Docker Logging:
Docker Monitoring:
Docker Security:
Docker Backup and Restore:
Docker Multi-Container Deployments:
Docker Kubernetes Integration:
Docker Windows Containers:
Docker Linux Containers:
Dockerfile Best Practices:
Docker Image Optimization:
Docker Container Optimization:
Docker Security Best Practices:
Docker Compliance and Governance:
Docker DevOps Tools:
Docker CI/CD Pipelines:
Docker Automated Testing:
Docker Continuous Integration:
Docker Continuous Deployment:
Docker Continuous Monitoring:
Docker Continuous Feedback:

     #### Docker Architecture   ####
    
Docker Engine: 
Docker Daemon:
Docker Client:
Docker Registry:
Docker Hub:
Docker Image:
Docker Container:


 
           #### Docker Use Cases    ####

Web Development: Use Docker to develop and deploy web applications.
DevOps: Use Docker to automate the deployment of applications and services.
CI/CD: Use Docker to automate the testing and deployment of applications.
Machine Learning
 
            #### commands    ####

docker run -it --rm -p 8080:8080 <image_name>
docker ps -a
docker stop <container_id>
docker rm <container_id>


